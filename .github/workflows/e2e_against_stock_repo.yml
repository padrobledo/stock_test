name: E2E against Stock API

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      api_repo:
        description: "Repo del servicio (owner/repo)"
        required: false
        default: "padrobledo/stock"
        type: string
      api_ref:
        description: "Ref/branch/SHA del servicio"
        required: false
        default: "main"
        type: string

jobs:
  e2e:
    runs-on: ubuntu-latest

    env:
      # DB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stock
      POSTGRES_HOST: localhost
      POSTGRES_PORT: "5432"
      # API
      API_HOST: 127.0.0.1
      API_PORT: "5000"
      API_URL: http://127.0.0.1:5000
      # SelecciÃ³n de repo/ref de la API
      API_REPO: ${{ github.event_name == 'workflow_dispatch' && inputs.api_repo || 'padrobledo/stock' }}
      API_REF:  ${{ github.event_name == 'workflow_dispatch' && inputs.api_ref  || 'main' }}

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER:     ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB:       ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout test suite (this repo)
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            stock/requirements.txt

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      # --- API privada ---
      - name: Checkout Stock API repo (private)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.API_REPO }}
          ref: ${{ env.API_REF }}
          path: stock
          token: ${{ secrets.STOCK_REPO_TOKEN }}

      - name: Install API dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r stock/requirements.txt

      - name: Wait for Postgres & ensure DB exists
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          for i in {1..10}; do
            pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" && break
            echo "Waiting for Postgres..."; sleep 2
          done
          psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -p "$POSTGRES_PORT" -tAc "SELECT 1 FROM pg_database WHERE datname='${POSTGRES_DB}';" | grep -q 1

      - name: Apply schema (.sql) from API repo
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          psql "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}" \
            -f stock/initialization/init_database_schema.sql

      - name: Start Flask API
        working-directory: stock
        env:
          FLASK_APP: main.py
        run: |
          export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
          nohup flask run --host=0.0.0.0 --port="${API_PORT}" &
          sleep 5

      - name: Healthcheck
        run: |
          curl -f "$API_URL/" | grep -iq "up"

      # --- Suite de pruebas ---
      - name: Install test suite dependencies (if present)
        if: hashFiles('requirements.txt') != ''
        run: |
          pip install -r requirements.txt

      - name: Run pytest
        env:
          API_URL: ${{ env.API_URL }}
        run: |
          pytest -q
